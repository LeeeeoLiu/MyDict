package com.leeeeo.mydict.models;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.leeeeo.mydict.models.EasyDictWords;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EASY_DICT_WORDS".
*/
public class EasyDictWordsDao extends AbstractDao<EasyDictWords, Long> {

    public static final String TABLENAME = "EASY_DICT_WORDS";

    /**
     * Properties of entity EasyDictWords.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name_lib = new Property(1, String.class, "name_lib", false, "NAME_LIB");
        public final static Property Name_words = new Property(2, String.class, "name_words", false, "NAME_WORDS");
        public final static Property Phonetic = new Property(3, String.class, "phonetic", false, "PHONETIC");
        public final static Property Explains = new Property(4, String.class, "explains", false, "EXPLAINS");
        public final static Property Verify_status = new Property(5, String.class, "verify_status", false, "VERIFY_STATUS");
        public final static Property Islearn = new Property(6, Boolean.class, "islearn", false, "ISLEARN");
        public final static Property Data_learn = new Property(7, java.util.Date.class, "data_learn", false, "DATA_LEARN");
        public final static Property Date_verify = new Property(8, java.util.Date.class, "date_verify", false, "DATE_VERIFY");
    };


    public EasyDictWordsDao(DaoConfig config) {
        super(config);
    }
    
    public EasyDictWordsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EASY_DICT_WORDS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME_LIB\" TEXT NOT NULL ," + // 1: name_lib
                "\"NAME_WORDS\" TEXT NOT NULL ," + // 2: name_words
                "\"PHONETIC\" TEXT," + // 3: phonetic
                "\"EXPLAINS\" TEXT," + // 4: explains
                "\"VERIFY_STATUS\" TEXT," + // 5: verify_status
                "\"ISLEARN\" INTEGER," + // 6: islearn
                "\"DATA_LEARN\" INTEGER," + // 7: data_learn
                "\"DATE_VERIFY\" INTEGER);"); // 8: date_verify
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_EASY_DICT_WORDS_NAME_LIB_NAME_WORDS ON EASY_DICT_WORDS" +
                " (\"NAME_LIB\",\"NAME_WORDS\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EASY_DICT_WORDS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, EasyDictWords entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName_lib());
        stmt.bindString(3, entity.getName_words());
 
        String phonetic = entity.getPhonetic();
        if (phonetic != null) {
            stmt.bindString(4, phonetic);
        }
 
        String explains = entity.getExplains();
        if (explains != null) {
            stmt.bindString(5, explains);
        }
 
        String verify_status = entity.getVerify_status();
        if (verify_status != null) {
            stmt.bindString(6, verify_status);
        }
 
        Boolean islearn = entity.getIslearn();
        if (islearn != null) {
            stmt.bindLong(7, islearn ? 1L: 0L);
        }
 
        java.util.Date data_learn = entity.getData_learn();
        if (data_learn != null) {
            stmt.bindLong(8, data_learn.getTime());
        }
 
        java.util.Date date_verify = entity.getDate_verify();
        if (date_verify != null) {
            stmt.bindLong(9, date_verify.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public EasyDictWords readEntity(Cursor cursor, int offset) {
        EasyDictWords entity = new EasyDictWords( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // name_lib
            cursor.getString(offset + 2), // name_words
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // phonetic
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // explains
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // verify_status
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // islearn
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // data_learn
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)) // date_verify
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, EasyDictWords entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName_lib(cursor.getString(offset + 1));
        entity.setName_words(cursor.getString(offset + 2));
        entity.setPhonetic(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setExplains(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setVerify_status(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIslearn(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setData_learn(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setDate_verify(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(EasyDictWords entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(EasyDictWords entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
